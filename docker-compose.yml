version: "3.9"

services:
  # site
  service--site:
    container_name: ${PROJECT_NAME}__${SITE__SERVICE}
    build: 
      context: ./${SITE__SERVICE}
      args:
        - WORKDIR_BASE=${WORKDIR_BASE}
        - SERVICE=${SITE__SERVICE}
    env_file:
      - .env-${ENV_RUN}
    command: ${SITE__COMAND}
    stdin_open: true
    tty: true
    volumes:
      - ./${SITE__SERVICE}:${WORKDIR_BASE}/${SITE__SERVICE}
      # node_modules
      - ./${SITE__SERVICE}/node_modules:${WORKDIR_BASE}/${SITE__SERVICE}/node_modules/
    depends_on:
      - ${DB_TEMPORARY__SERVICE}
    restart: ${CONTAINER_RESTART_MODE}

  # admin
  service--admin:
    container_name: ${PROJECT_NAME}__${ADMIN__SERVICE}
    build: 
      context: ./${ADMIN__SERVICE}
      args:
        - WORKDIR_BASE=${WORKDIR_BASE}
        - SERVICE=${ADMIN__SERVICE}
    env_file:
      - .env-${ENV_RUN}
    command: ${ADMIN__COMAND}
    stdin_open: true
    tty: true
    volumes: 
      - ./${ADMIN__SERVICE}:${WORKDIR_BASE}/${ADMIN__SERVICE}
      # node_modules
      - ./${ADMIN__SERVICE}/node_modules:${WORKDIR_BASE}/${ADMIN__SERVICE}/node_modules/
    depends_on:
      - ${API__SERVICE}
    restart: ${CONTAINER_RESTART_MODE}

  # #api
  service--api:
    container_name: ${PROJECT_NAME}__${API__SERVICE}
    build: 
      context: ./${API__SERVICE}
      args:
        - WORKDIR_BASE=${WORKDIR_BASE}
        - SERVICE=${API__SERVICE}
    command: ${API__COMAND}
    env_file:
      - .env-${ENV_RUN}
      - .env-custom
    stdin_open: true
    tty: true
    volumes:
      - ./${API__SERVICE}:${WORKDIR_BASE}/${API__SERVICE}
      - ./${API__SERVICE}/node_modules:${WORKDIR_BASE}/${API__SERVICE}/node_modules/
      # For parse function $t()
      - ./${ADMIN__SERVICE}/src:${WORKDIR_BASE}/${API__SERVICE}/symlinks/${ADMIN__SERVICE}/
      - ./${SITE__SERVICE}:${WORKDIR_BASE}/${API__SERVICE}/symlinks/${SITE__SERVICE}/
      # files
      - ./${FILES__SERVICE}:${WORKDIR_BASE}/${API__SERVICE}/symlinks/${FILES__SERVICE}/
      # db main
      - ./${DB_MAIN__SERVICE}:${WORKDIR_BASE}/${API__SERVICE}/symlinks/${DB_MAIN__SERVICE}/
      # proxy
      - ./${PROXY__SERVICE}:${WORKDIR_BASE}/${API__SERVICE}/symlinks/${PROXY__SERVICE}/
    depends_on:
      - ${DB_MAIN__SERVICE}
      - ${DB_TEMPORARY__SERVICE}
    restart: ${CONTAINER_RESTART_MODE}

  # db - posgres
  service--db-main:
    container_name: ${PROJECT_NAME}__${DB_MAIN__SERVICE}
    build: 
      context: ./${DB_MAIN__SERVICE}
      args:
        - WORKDIR_BASE=${WORKDIR_BASE}
        - SERVICE=${DB_MAIN__SERVICE}
    environment:
      POSTGRES_DB: ${DB_MAIN__NAME_DB}
      POSTGRES_PASSWORD: ${DB_MAIN__PASSWORD_DB}
      WORKDIR_BASE: ${WORKDIR_BASE}
      DB_MAIN__NAME_DB: ${DB_MAIN__NAME_DB}
      DB_MAIN__USER_DB: ${DB_MAIN__USER_DB}
      DB_MAIN__PASSWORD_DB: ${DB_MAIN__PASSWORD_DB}
      DB_MAIN__PORT_INTERNAL: ${DB_MAIN__PORT_INTERNAL}
      DB_MAIN__SERVICE: ${DB_MAIN__SERVICE}
      DB_MAIN__BACKUP_PATHS: ${DB_MAIN__BACKUP_PATHS}
      DB_MAIN__BACKUP_REPORT_PATH: ${DB_MAIN__BACKUP_REPORT_PATH}
      DB_MAIN__BACKUP_MESSAGING_FILE: ${DB_MAIN__BACKUP_MESSAGING_FILE}
      API__SERVICE: ${API__SERVICE}
    ports:
      - ${DB_MAIN__PORT_EXTERNAL}:${DB_MAIN__PORT_INTERNAL}
    stdin_open: true
    tty: true
    volumes:
      # database
      - /var/lib/postgresql/data
      # "docker-entrypoint-initdb.d" - creates a table in the database and performs some actions 1 time during initialization (see container documentation)
      - ./${DB_MAIN__SERVICE}/init:/docker-entrypoint-initdb.d
       # Creates a backup
      - ./${DB_MAIN__SERVICE}/server.js:${WORKDIR_BASE}/${DB_MAIN__SERVICE}/server.js
      - ./${DB_MAIN__SERVICE}/${DB_MAIN__BACKUP_DIR}:${WORKDIR_BASE}/${DB_MAIN__SERVICE}/${DB_MAIN__BACKUP_DIR}
    restart: ${CONTAINER_RESTART_MODE}

  # db - redis
  service--db-temporary:
    container_name: ${PROJECT_NAME}__${DB_TEMPORARY__SERVICE}
    build: 
      context: ./${DB_TEMPORARY__SERVICE}
    ports:
      - ${DB_TEMPORARY__PORT_EXTERNAL}:${DB_TEMPORARY__PORT_INTERNAL}
    restart: ${CONTAINER_RESTART_MODE}

  # proxy - nginx
  service--proxy:
    container_name: ${PROJECT_NAME}__${PROXY__SERVICE}
    build:
      context: ./${PROXY__SERVICE}
      args:
        - WORKDIR_BASE=${WORKDIR_BASE}
        - SERVICE=${PROXY__SERVICE}
        - SITE__DOMAIN=${SITE__DOMAIN}
    env_file:
      - .env-${ENV_RUN}
      - .env-custom
    ports:
      - ${PROXY__PORT_443_EXTERNAL}:443
      - ${PROXY__PORT_80_EXTERNAL}:80
    volumes:
      # "default.conf.template" - is to be able to pass environment variables to config (see container documentation)
      - ./${PROXY__SERVICE}/nginx.conf:/etc/nginx/templates/default.conf.template
      # files
      - ./${FILES__SERVICE}:${PROXY__FILES_STORAGE}
      - ./${PROXY__SERVICE}:${WORKDIR_BASE}/${PROXY__SERVICE}
    depends_on:
      - ${ADMIN__SERVICE}
      - ${SITE__SERVICE}
      - ${API__SERVICE}
      - ${FILES__SERVICE}
    restart: ${CONTAINER_RESTART_MODE}

  # files
  service--files:
    container_name: ${PROJECT_NAME}__${FILES__SERVICE}
    build: 
      context: ./${FILES__SERVICE}
      args:
        - WORKDIR_BASE=${WORKDIR_BASE}
        - SERVICE=${FILES__SERVICE}
    restart: ${CONTAINER_RESTART_MODE}